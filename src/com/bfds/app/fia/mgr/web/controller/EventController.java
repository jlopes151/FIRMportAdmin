package com.bfds.app.fia.mgr.web.controller;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
//import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.beans.factory.annotation.Autowired;

import com.bfds.app.fia.mgr.service.impl.EventServiceImpl;
import com.bfds.app.fia.mgr.model.Event;
import com.bfds.app.fia.mgr.model.EventTypes;
import com.bfds.app.fia.mgr.model.Firm;
import com.bfds.app.fia.mgr.model.SearchValidator;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

@Controller
public class EventController extends FIRMportAdminController {

	private static Logger logger;

	private final EventServiceImpl eventserviceimpl;
	private SearchValidator sv;

	@Autowired
	public EventController(EventServiceImpl eventserviceimpl) {
		this.eventserviceimpl = eventserviceimpl;
	}

	/*
	 * 
	 */
	@RequestMapping(value = "/setEventRowToEdit", method = RequestMethod.POST)
	@ResponseBody
	public SearchValidator setRowIndex(HttpServletRequest request) {

		HttpSession session = request.getSession();
		session.setAttribute("FIRM_EVENT_ID", (String) request.getParameter("firm_event_id"));
		logger.info("The setEventRowToEdit Event id = "	+ (String) request.getParameter("firm_event_id"));

		sv = new SearchValidator();
		sv.setTrue_false(true);

		return sv;
	}

	@RequestMapping("/viewEventsPage")
	public String callViewEvents() {
		return "viewEventsPage";
	}

	@RequestMapping("/showAllEvents")
	@ResponseBody
	public List<Event> callShowAllEvents(HttpServletRequest request) {

		HttpSession session = request.getSession();
		String _event_dt = (String) session.getAttribute("EVENT_DT");
		List<Event> event = eventserviceimpl.doFindAllEvent(_event_dt + "%");

		return event;
	}

	/*
	 * Store the selected Company id
	 */
	@RequestMapping("/eventSaveCompanies")
	@ResponseBody
	public SearchValidator callSaveSelectedCompanies(HttpServletRequest request) {

		HttpSession session = request.getSession();
		session.setAttribute("COMPANIES",
				(String) request.getParameter("sel_companies"));

		sv = new SearchValidator();
		sv.setTrue_false(true);

		return sv;
	}

	/*
	 * Store the new Event data
	 */
	@RequestMapping("/addEvent")
	@ResponseBody
	public SearchValidator callAddEvent(HttpServletRequest request) {

		HttpSession session = request.getSession();
		sv = new SearchValidator();
		int _firm_id = Integer.parseInt((String) session.getAttribute("FIRM_ID"));
		Event event = new Event();

		event.setFirm_id(_firm_id);
		event.setEvent_typ_cd((String) request.getParameter("event_typ_cd"));
		String event_dt = (String) request.getParameter("event_dt");
		event.setEvent_dt((event_dt == null) ? "" : event_dt);
		event.setEvent_dsc((String) request.getParameter("event_dsc"));
		event.setEvent_title((String) request.getParameter("event_title"));
		event.setLst_updt_userid(this.getUserName(request));
/*
 * ToDo: When Eric gets a handle on how the Events will handle Companies remove the
 * from the Session
 */
		String sel_companies = (String)session.getAttribute("COMPANIES");
		event.setMgmt_co_cds(sel_companies);
		sv.setMessage("You have created an event!");
		/*
		 * since the PK is generated by the DB no need to trap duplicate keys 
		 */
		this.eventserviceimpl.insertEvent(event);

		sv.setTrue_false(true);

		return sv;
	}

	/*
	 * Store the new Event data
	 */
	@RequestMapping("/addEventPage")
	public String callAddEvent() {
		return "addEventPage";
	}

	/*
	 * Delete the Event data
	 */
	@RequestMapping("/deleteEventPage")
	public String calldeleteEvent() {
		return "deleteEventPage";
	}

	/*
	 * Edit the selected Event
	 */
	@RequestMapping("/editEventPage")
	public String callEditEvent() {
		return "editEventPage";
	}

	/*
	 * 
	 */
	@RequestMapping("/deleteEvent")
	@ResponseBody
	public SearchValidator callDeleteEvent(HttpServletRequest request) {

		HttpSession session = request.getSession();
		sv = new SearchValidator();
		String the_firm_event_id = (String)session.getAttribute("FIRM_EVENT_ID");

		/*
		 * There must be a check for the firm_event_id since the ui allows the
		 * user to click the delete nav option with out selecting a record to
		 * delete. The user must click a row in the view.
		 */
		if (the_firm_event_id != null) {
			int _firm_event_id = Integer.parseInt(the_firm_event_id);
			this.eventserviceimpl.deleteEvent(_firm_event_id);
			sv.setTrue_false(true);
		} else {
			sv.setTrue_false(false);
			sv.setMessage("<p>A record to delete was not selected, you must select a record to delete!</p>");
		}

		return sv;
	}

	/*
	 * Get the Event data to edit
	 */
	@RequestMapping("/editEvent")
	@ResponseBody
	public Event eventToEdit(HttpServletRequest request) {

		HttpSession session = request.getSession();
		int _firm_event_id = Integer.parseInt((String)session.getAttribute("FIRM_EVENT_ID"));
		logger.info("In the editEvent " + _firm_event_id);
		List<Event> events = eventserviceimpl.doFindAnEvent(_firm_event_id);

		String sel_companies = (String) session.getAttribute("COMPANIES");
		logger.info("Existing session companies " + sel_companies + "\nThose in the Event " + events.get(0).getMgmt_co_cds());
		/*
		 * if the user doesn't change the companies no harm done. if they do
		 * then I want to get the ones stored in the session by the company
		 * dialog n the update
		 */
		if (sel_companies == null) {
			session.setAttribute("COMPANIES", events.get(0).getMgmt_co_cds());
		}
		return (events.size() > 0) ? events.get(0) : null;
	}

	/*
	 * Get the Event type data
	 */
	@RequestMapping("/getEventTypes")
	@ResponseBody
	public List<EventTypes> getEventTypes() {

		List<EventTypes> eventtypes = eventserviceimpl.getEventTypes();

		return eventtypes;
	}

	/*
	 * 
	 */
	@RequestMapping("/updateEvent")
	@ResponseBody
	public SearchValidator callUpdateEvent(HttpServletRequest request) {

		HttpSession session = request.getSession();
		int _firm_event_id = Integer.parseInt((String)session.getAttribute("FIRM_EVENT_ID"));
		sv = new SearchValidator();

		List<Event> events = eventserviceimpl.doFindAnEvent(_firm_event_id);
		Event event = events.get(0);

		event.setEvent_typ_cd((String) request.getParameter("event_typ_cd"));
		event.setEvent_dt((String) request.getParameter("event_dt"));
		event.setEvent_dsc((String) request.getParameter("event_dsc"));
		event.setEvent_title((String) request.getParameter("event_title"));
		String sel_companies = (String) session.getAttribute("COMPANIES");
		event.setMgmt_co_cds(sel_companies);
		event.setLst_updt_userid(this.getUserName(request));

		eventserviceimpl.updateEvent(event);

		sv.setTrue_false(true);

		return sv;
	}

}
